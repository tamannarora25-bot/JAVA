import java.io.*;
import java.util.*;

class Student implements Serializable {
    private static final long serialVersionUID = 1L;
    private String name;
    private int rollNumber;

    public Student(String name, int rollNumber) {
        this.name = name;
        this.rollNumber = rollNumber;
    }

    @Override
    public String toString() {
        return "Student{name='" + name + "', rollNumber=" + rollNumber + '}';
    }
}

class Employee implements Serializable {
    private static final long serialVersionUID = 1L;
    private String name;
    private String employeeId;
    private String designation;
    private double salary;

    public Employee(String name, String employeeId, String designation, double salary) {
        this.name = name;
        this.employeeId = employeeId;
        this.designation = designation;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "Employee{" +
                "Name='" + name + '\'' +
                ", Employee ID='" + employeeId + '\'' +
                ", Designation='" + designation + '\'' +
                ", Salary=" + salary +
                '}';
    }
}

public class CombinedApp {

    private static final String EMPLOYEE_FILE = "employees.dat";

    public static int sumList(List<Integer> numbers) {
        int sum = 0;
        for (Integer num : numbers) {
            sum += num;
        }
        return sum;
    }

    public static Integer parseStringToInteger(String str) {
        return Integer.parseInt(str);
    }

    public static void serializeStudent(Student student, String filename) throws IOException {
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(filename))) {
            out.writeObject(student);
        }
    }

    public static Student deserializeStudent(String filename) throws IOException, ClassNotFoundException {
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(filename))) {
            return (Student) in.readObject();
        }
    }

    public static void addEmployee(Employee emp) {
        List<Employee> employees = readEmployees();
        employees.add(emp);
        saveEmployees(employees);
    }

    public static List<Employee> readEmployees() {
        List<Employee> employees = new ArrayList<>();
        File file = new File(EMPLOYEE_FILE);
        if (!file.exists()) return employees;
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file))) {
            employees = (List<Employee>) ois.readObject();
        } catch (IOException | ClassNotFoundException e) {}
        return employees;
    }

    public static void saveEmployees(List<Employee> employees) {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(EMPLOYEE_FILE))) {
            oos.writeObject(employees);
        } catch (IOException e) {
            System.out.println("Error saving employees: " + e.getMessage());
        }
    }

    public static void displayEmployees() {
        List<Employee> employees = readEmployees();
        if (employees.isEmpty()) {
            System.out.println("No employees found.");
            return;
        }
        for (Employee e : employees) {
            System.out.println(e);
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Autoboxing example:");
        List<Integer> nums = List.of(10, 20, 30, 40);
        System.out.println("Sum of list: " + sumList(nums));
        String numberStr = "123";
        System.out.println("Parsed number: " + parseStringToInteger(numberStr));

        System.out.println("\nSerialization example:");
        Student student = new Student("John Doe", 101);
        String studentFile = "student.ser";
        try {
            serializeStudent(student, studentFile);
            System.out.println("Student serialized.");
            Student deserializedStudent = deserializeStudent(studentFile);
            System.out.println("Deserialized Student: " + deserializedStudent);
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }

        int choice;
        do {
            System.out.println("\n--- Employee Management Menu ---");
            System.out.println("1. Add an Employee");
            System.out.println("2. Display All Employees");
            System.out.println("3. Exit");
            System.out.print("Enter your choice: ");

            while (!sc.hasNextInt()) {
                System.out.print("Invalid input. Enter a number (1-3): ");
                sc.next();
            }
            choice = sc.nextInt();
            sc.nextLine();

            swit
